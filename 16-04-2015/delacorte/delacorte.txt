require 'matrix'
class Delacorte
  
  def self.find(array)
    @matrix = Matrix[]
    @pair_array = []
    @pair_gcd = []
    @pair_distance = []

    matrix = build_matrix(array)
    @total_pairs = create_pairs(matrix)
    @total_pairs.map{|pair| @pair_gcd << find_gcd(pair) }
    @total_pairs.map{|pair|distance_between(pair)}
    dclo = @pair_distance.zip(@pair_gcd)
    arr = dclo.map{|t| t[0] * t[1] }
    arr.inject(:+)
  end

  def self.create_pairs(matrix)
    array = matrix.to_a.flatten
    array.each_with_index do |arr, i|
      count = 1
      while count < (array.count)
        @pair_array << [arr, array[count]] if arr != array[count]
        count += 1
      end 
    end
    @uniq_pairs = @pair_array.uniq
    @uniq_pairs.reject!{ |x| @uniq_pairs.include? x.reverse}
    
  end

  def self.build_matrix(array)
    array.map{|arr|@matrix = Matrix.rows(@matrix.to_a <<  arr )}
    @matrix  
  end

  def self.find_gcd(pair)
    pair[0].gcd(pair[1])
  end
  

  def self.distance_between(pair)
    x= @matrix.find_index(pair[0])
    y= @matrix.find_index(pair[1])
    dist = (x[0] - y[0]).abs + (y[1] - x[1]).abs
    @pair_distance << dist
  end
end
